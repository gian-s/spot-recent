{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport useAuth from \"./useAuth\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nconst spotifyApi = new SpotifyWebApi({\n  redirectUri: process.env.REACT_APP_REDIRECT_URI,\n  clientId: process.env.REACT_APP_CLIENT_ID,\n  clientSecret: process.env.REACT_APP_CLIENT_SECRET\n});\nexport default function Dashboard(code) {\n  _s();\n  const accessToken = useAuth(code);\n  const [playlists, setPlaylists] = useState([]);\n  //const [tracks, setTracks] = useState({});\n\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.setAccessToken(accessToken);\n  }, [accessToken]);\n  useEffect(() => {\n    if (!accessToken) return;\n    const MAX_PLAYLISTS = 200;\n    async function getPlaylist(user_id, limit, offset) {\n      //var to_ret = [];\n\n      const res = await spotifyApi.getUserPlaylists(user_id, {\n        limit: limit,\n        offset: offset\n      });\n      return res.body.items.map(item => {\n        return {\n          id: item.id,\n          name: item.name\n        };\n      });\n    }\n    const getPlaylists = async () => {\n      var ret = [];\n      for (let i = 0; i < MAX_PLAYLISTS; i += 50) {\n        const arr1 = await getPlaylist(process.env.REACT_APP_USER, 50, i);\n        //console.log(arr1)\n        //arr1.push.apply(arr1,ret)\n        //console.log(ret)\n        ret.push.apply(ret, arr1);\n      }\n      return ret;\n    };\n    async function getTrackList(playlist_id, limit, offset) {\n      //var ret = [];\n\n      const tracks = await spotifyApi.getPlaylistTracks(playlist_id, {\n        limit: limit,\n        offset: offset\n      });\n\n      //console.log(tracks);\n      //return tracks.body.items;\n\n      return tracks.body.items.map(item => {\n        return {\n          track_id: item.track.id,\n          track_name: item.track.name\n        };\n      });\n    }\n    async function allTracks(playlist_id) {\n      var ret = [];\n      for (let i = 0; i < MAX_PLAYLISTS; i += 50) {\n        const arr1 = await getTrackList(playlist_id, 50, i);\n        //console.log(arr1)\n        //arr1.push.apply(arr1,ret)\n        //console.log(ret)\n        ret.push.apply(ret, arr1);\n      }\n      return ret;\n    }\n    (async () => {\n      const names = await getPlaylists();\n      const toRet = names.map(async item => {\n        const tmp = await allTracks(item.id);\n        return {\n          playlist_id: item.id,\n          playlist_name: item.name,\n          tracks: tmp\n        };\n      });\n      const total = await Promise.all(toRet);\n      //console.log(total);\n      //setPlaylists(names);\n      setPlaylists(total);\n    })();\n\n    //memory address of where the array should be stored\n    //ASYNC AWAIT\n    //.then only returns when something is\n    //once it gets a result then\n  }, [accessToken]);\n\n  //console.log(playlists);\n\n  return playlists;\n}\n_s(Dashboard, \"7zJmTZZqALEQ3MRMUA19UAc6DgA=\", false, function () {\n  return [useAuth];\n});\n_c = Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["useState","useEffect","useAuth","SpotifyWebApi","spotifyApi","redirectUri","process","env","REACT_APP_REDIRECT_URI","clientId","REACT_APP_CLIENT_ID","clientSecret","REACT_APP_CLIENT_SECRET","Dashboard","code","accessToken","playlists","setPlaylists","setAccessToken","MAX_PLAYLISTS","getPlaylist","user_id","limit","offset","res","getUserPlaylists","body","items","map","item","id","name","getPlaylists","ret","i","arr1","REACT_APP_USER","push","apply","getTrackList","playlist_id","tracks","getPlaylistTracks","track_id","track","track_name","allTracks","names","toRet","tmp","playlist_name","total","Promise","all"],"sources":["/home/gianca/Projects/spot-recent/app/src/Dashboard.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport useAuth from \"./useAuth\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\n\nconst spotifyApi = new SpotifyWebApi({\n  redirectUri: process.env.REACT_APP_REDIRECT_URI,\n  clientId: process.env.REACT_APP_CLIENT_ID,\n  clientSecret: process.env.REACT_APP_CLIENT_SECRET,\n});\n\nexport default function Dashboard(code) {\n  const accessToken = useAuth(code);\n  const [playlists, setPlaylists] = useState([]);\n  //const [tracks, setTracks] = useState({});\n\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.setAccessToken(accessToken);\n  }, [accessToken]);\n\n  useEffect(() => {\n    if (!accessToken) return;\n\n    const MAX_PLAYLISTS = 200;\n\n    async function getPlaylist(user_id, limit, offset) {\n      //var to_ret = [];\n\n      const res = await spotifyApi.getUserPlaylists(user_id, {\n        limit: limit,\n        offset: offset,\n      });\n\n      return res.body.items.map((item) => {\n        return {\n          id: item.id,\n          name: item.name,\n        };\n      });\n    }\n\n    const getPlaylists = async () => {\n      var ret = [];\n      for (let i = 0; i < MAX_PLAYLISTS; i += 50) {\n        const arr1 = await getPlaylist(process.env.REACT_APP_USER, 50, i);\n        //console.log(arr1)\n        //arr1.push.apply(arr1,ret)\n        //console.log(ret)\n        ret.push.apply(ret, arr1);\n      }\n\n      return ret;\n    };\n    async function getTrackList(playlist_id, limit, offset) {\n      //var ret = [];\n\n      const tracks = await spotifyApi.getPlaylistTracks(playlist_id, {\n        limit: limit,\n        offset: offset,\n      });\n\n      //console.log(tracks);\n      //return tracks.body.items;\n\n      return tracks.body.items.map((item) => {\n        return {\n          track_id: item.track.id,\n          track_name: item.track.name,\n        };\n      });\n    }\n\n    async function allTracks(playlist_id) {\n      var ret = [];\n      for (let i = 0; i < MAX_PLAYLISTS; i += 50) {\n        const arr1 = await getTrackList(playlist_id, 50, i);\n        //console.log(arr1)\n        //arr1.push.apply(arr1,ret)\n        //console.log(ret)\n        ret.push.apply(ret, arr1);\n      }\n\n      return ret;\n    }\n\n    (async () => {\n      const names = await getPlaylists();\n      const toRet = names.map(async (item) => {\n        const tmp = await allTracks(item.id);\n        return {\n          playlist_id: item.id,\n          playlist_name: item.name,\n          tracks: tmp,\n        };\n      });\n\n      const total = await Promise.all(toRet);\n      //console.log(total);\n      //setPlaylists(names);\n      setPlaylists(total);\n    })();\n\n    //memory address of where the array should be stored\n    //ASYNC AWAIT\n    //.then only returns when something is\n    //once it gets a result then\n  }, [accessToken]);\n\n  //console.log(playlists);\n\n  return playlists;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}