{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport useAuth from \"./useAuth\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nconst spotifyApi = new SpotifyWebApi({\n  redirectUri: process.env.REACT_APP_REDIRECT_URI,\n  clientId: process.env.REACT_APP_CLIENT_ID,\n  clientSecret: process.env.REACT_APP_CLIENT_SECRET\n});\nexport default function Dashboard(_ref) {\n  _s();\n  let {\n    code\n  } = _ref;\n  const accessToken = useAuth(code);\n  const [playlists, setPlaylists] = useState([]);\n  //const [tracks, setTracks] = useState({});\n\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.setAccessToken(accessToken);\n  }, [accessToken]);\n  useEffect(() => {\n    if (!accessToken) return;\n    (async () => {\n      const spotifyApi = new SpotifyWebApi({\n        redirectUri: process.env.REACT_APP_REDIRECT_URI,\n        clientId: process.env.REACT_APP_CLIENT_ID,\n        clientSecret: process.env.REACT_APP_CLIENT_SECRET\n      });\n      await spotifyApi.setAccessToken(accessToken);\n      const ret = await spotifyApi.getMyRecentlyPlayedTracks({\n        limit: 20\n      }).then(function (data) {\n        // Output items\n        console.log(\"Your 20 most recently played tracks are:\");\n        data.body.items.forEach(item => console.log(item.track));\n      }, function (err) {\n        console.log(\"Something went wrong!\", err);\n      });\n    })();\n\n    //memory address of where the array should be stored\n    //ASYNC AWAIT\n    //.then only returns when something is\n    //once it gets a result then\n  }, [accessToken]);\n\n  //console.log(playlists);\n\n  return ret;\n}\n_s(Dashboard, \"7zJmTZZqALEQ3MRMUA19UAc6DgA=\", false, function () {\n  return [useAuth];\n});\n_c = Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["useState","useEffect","useAuth","SpotifyWebApi","spotifyApi","redirectUri","process","env","REACT_APP_REDIRECT_URI","clientId","REACT_APP_CLIENT_ID","clientSecret","REACT_APP_CLIENT_SECRET","Dashboard","code","accessToken","playlists","setPlaylists","setAccessToken","ret","getMyRecentlyPlayedTracks","limit","then","data","console","log","body","items","forEach","item","track","err"],"sources":["/home/gianca/Projects/spot-recent/app/src/Dashboard.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport useAuth from \"./useAuth\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\n\nconst spotifyApi = new SpotifyWebApi({\n  redirectUri: process.env.REACT_APP_REDIRECT_URI,\n  clientId: process.env.REACT_APP_CLIENT_ID,\n  clientSecret: process.env.REACT_APP_CLIENT_SECRET,\n});\n\nexport default function Dashboard({ code }) {\n  const accessToken = useAuth(code);\n  const [playlists, setPlaylists] = useState([]);\n  //const [tracks, setTracks] = useState({});\n\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.setAccessToken(accessToken);\n  }, [accessToken]);\n\n  useEffect(() => {\n    if (!accessToken) return;\n\n    (async () => {\n      const spotifyApi = new SpotifyWebApi({\n        redirectUri: process.env.REACT_APP_REDIRECT_URI,\n        clientId: process.env.REACT_APP_CLIENT_ID,\n        clientSecret: process.env.REACT_APP_CLIENT_SECRET,\n      });\n      await spotifyApi.setAccessToken(accessToken);\n      const ret = await spotifyApi\n        .getMyRecentlyPlayedTracks({\n          limit: 20,\n        })\n        .then(\n          function (data) {\n            // Output items\n            console.log(\"Your 20 most recently played tracks are:\");\n            data.body.items.forEach((item) => console.log(item.track));\n          },\n          function (err) {\n            console.log(\"Something went wrong!\", err);\n          }\n        );\n    })();\n\n    //memory address of where the array should be stored\n    //ASYNC AWAIT\n    //.then only returns when something is\n    //once it gets a result then\n  }, [accessToken]);\n\n  //console.log(playlists);\n\n  return ret;\n}\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,aAAa,MAAM,sBAAsB;AAEhD,MAAMC,UAAU,GAAG,IAAID,aAAa,CAAC;EACnCE,WAAW,EAAEC,OAAO,CAACC,GAAG,CAACC,sBAAsB;EAC/CC,QAAQ,EAAEH,OAAO,CAACC,GAAG,CAACG,mBAAmB;EACzCC,YAAY,EAAEL,OAAO,CAACC,GAAG,CAACK;AAC5B,CAAC,CAAC;AAEF,eAAe,SAASC,SAAS,OAAW;EAAA;EAAA,IAAV;IAAEC;EAAK,CAAC;EACxC,MAAMC,WAAW,GAAGb,OAAO,CAACY,IAAI,CAAC;EACjC,MAAM,CAACE,SAAS,EAAEC,YAAY,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAC9C;;EAEAC,SAAS,CAAC,MAAM;IACd,IAAI,CAACc,WAAW,EAAE;IAClBX,UAAU,CAACc,cAAc,CAACH,WAAW,CAAC;EACxC,CAAC,EAAE,CAACA,WAAW,CAAC,CAAC;EAEjBd,SAAS,CAAC,MAAM;IACd,IAAI,CAACc,WAAW,EAAE;IAElB,CAAC,YAAY;MACX,MAAMX,UAAU,GAAG,IAAID,aAAa,CAAC;QACnCE,WAAW,EAAEC,OAAO,CAACC,GAAG,CAACC,sBAAsB;QAC/CC,QAAQ,EAAEH,OAAO,CAACC,GAAG,CAACG,mBAAmB;QACzCC,YAAY,EAAEL,OAAO,CAACC,GAAG,CAACK;MAC5B,CAAC,CAAC;MACF,MAAMR,UAAU,CAACc,cAAc,CAACH,WAAW,CAAC;MAC5C,MAAMI,GAAG,GAAG,MAAMf,UAAU,CACzBgB,yBAAyB,CAAC;QACzBC,KAAK,EAAE;MACT,CAAC,CAAC,CACDC,IAAI,CACH,UAAUC,IAAI,EAAE;QACd;QACAC,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;QACvDF,IAAI,CAACG,IAAI,CAACC,KAAK,CAACC,OAAO,CAAEC,IAAI,IAAKL,OAAO,CAACC,GAAG,CAACI,IAAI,CAACC,KAAK,CAAC,CAAC;MAC5D,CAAC,EACD,UAAUC,GAAG,EAAE;QACbP,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEM,GAAG,CAAC;MAC3C,CAAC,CACF;IACL,CAAC,GAAG;;IAEJ;IACA;IACA;IACA;EACF,CAAC,EAAE,CAAChB,WAAW,CAAC,CAAC;;EAEjB;;EAEA,OAAOI,GAAG;AACZ;AAAC,GA7CuBN,SAAS;EAAA,QACXX,OAAO;AAAA;AAAA,KADLW,SAAS;AAAA;AAAA"},"metadata":{},"sourceType":"module"}